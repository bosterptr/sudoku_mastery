version: '3.8'
services:
  nginx:
    image: nginx:1.25.4-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./cert:/etc/nginx/certs
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - sudoku_service
      - auth_service
  postgres:
    image: 'bitnami/postgresql:latest'
    ports:
      - '5432:5432'
    environment:
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_USERNAME=postgres
    volumes:
      - ./persistence/pgdata:/bitnami/postgresql
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 10s
      retries: 120
  redis:
    image: 'bitnami/redis:latest'
    ports:
      - '6379:6379'
    environment:
      - REDIS_PASSWORD=password123
    healthcheck:
      test: "redis-cli --raw incr ping"
  zoo1:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zoo1
    ports:
      - '2181:2181'
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - ./persistence/zoo1/data:/data
      - ./persistence/zoo1/datalog:/datalog
  kafka1:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka1
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: 'zoo1:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      TOPIC_AUTO_CREATE: true
    volumes:
      - ./persistence/kafka1/data:/var/lib/kafka/data
    # healthcheck:
    #   test: "kafka-topics --bootstrap-server localhost:9092 --list 2>&1"
    #   interval: 10s
    #   timeout: 2s
    #   retries: 100
    depends_on:
      - zoo1
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
  frontend_react:
    build:
      context: .
      dockerfile: ./frontend_react/Dockerfile
    ports:
      - 5002:80
    environment:
      GENERATE_SOURCEMAP: false
  sudoku_service:
    build:
      context: ./sudoku_service
      target: final
    ports:
      - 5001:5000
    env_file:
      - ./.sudoku.env
    depends_on:
      - kafka1
      - postgres
    volumes:
      - ./cert:/cert
  auth_service:
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    ports:
      - '5000:5000'
    depends_on:
      - redis
      - postgres
      - kafka1
      # redis:
      #   condition: service_healthy
      # postgres:
      #   condition: service_healthy
      # kafka1:
      #   condition: service_healthy
    env_file:
      - ./.auth.env
    volumes:
      - ./cert:/usr/src/app/cert
  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
  mailer:
    build:
      context: .
      dockerfile: ./mailer/Dockerfile
    depends_on:
      - kafka1
      - mailhog
    env_file:
      - ./.mailer.env
  go_websocket:
    build:
      context: go_websocket
    env_file:
      - ./.go_websocket.env
    volumes:
      - ./cert:/cert
  # nginx:
  #   image: nginx:1.13-alpine
  #   ports:
  #     - 3000:80
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   depends_on:
  #     - auth
  #     - company
  #     - kanban
