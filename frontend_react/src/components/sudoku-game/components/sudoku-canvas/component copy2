/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-static-element-interactions */
import React, { useEffect, useRef, useState } from 'react';
import useEventListener from 'app/common/hooks/useEventListener';
import initWasm, { solve } from 'sudoku_wasm';

const CANVAS_SIZE = 500;
const COLOR_BACKGROUND = '#fff';
const COLOR_THIN_BORDER = '#BFC6D4';
const COLOR_DARK = '#344861';
const COLOR_BLUE = '#325aaf';
const COLOR_RED = '#e55c6c';
const COLOR_NEIGHBOR = '#e2ebf3';
const COLOR_SAME_VAL = '#c3d7ea';
const COLOR_CONFLICT = '#f7cfd6';
const COLOR_SELECTED = '#bbdefb';
const ALL_SUDOKU_CELLS = 81;
const MAGIC_NUMBER_TO_SCALE_NUMBERS_PROPERLY = 110;
// const COLOR_NOTES = '#6e7c8c';
// const COLOR_LIGHT_BLUE = '#b2dffe';
// const COLOR_DARK_SMART = '#10151D';
// const COLOR_LIGHT_SMART = '#3E3F42';
// const COLOR_GREEN = '#34c759';
// const COLOR_RED_SMART = '#ff2d55';
// const COLOR_YELLOW_SMART = '#FC0';
// const COLOR_BLUE_SMART = '#b2dffe';
// const COLOR_NOTE_DARK = '#322929';
// const LOADING_CLASS = 'loading';
// const STANDARD_WIN_CLASS = 'win';
// const BLOCKED_CLASS = 'blocked';

// interface Isizes {
//   block: number;
//   cell: number;
//   contextSize: number;
//   outer: number;
//   pixelRatio: number;
//   thin: number;
//   wrapperSize: number;
// }
// interface ICoord {
//   x: number;
//   y: number;
//   index: string;
//   row: number;
//   col: number;
// }
const getBlockSize = (pixelRatio: number) => (CANVAS_SIZE * pixelRatio - 2 * pixelRatio) / 3;
// const isTheSameLargerCube = (index: number, indexToCompare: number) =>
//   Math.floor(index / 27) === Math.floor(indexToCompare / 27) &&
//   Math.floor((index % 9) / 3) === Math.floor((indexToCompare % 9) / 3);
const getCellSize = (pixelRatio: number) => (CANVAS_SIZE * pixelRatio - 4 * pixelRatio) / 9;
const getContextSize = (pixelRatio: number) => CANVAS_SIZE * pixelRatio;
const getOuterSize = (pixelRatio: number) => 2 * pixelRatio;
const getThinSize = (pixelRatio: number) => 0.5 * pixelRatio;
const getX = (index: number) => Math.floor(index / 9);
const getY = (index: number) => index % 9;
const isSudokuCellEmpty = (char: string) => char === '.';
const getCellXPosition = (outerSize: number, cellSize: number, index: number) =>
  outerSize + cellSize * getY(index);
const getCellYPosition = (outerSize: number, cellSize: number, index: number) =>
  outerSize + cellSize * getX(index);
const getCubeId = (index: number) => `${Math.floor(getX(index) / 3)}${Math.floor(getY(index) / 3)}`;
// const getSizes = (pixelRatio: number, clientWidth: number): Isizes => {
//   const canvasSize = CANVAS_SIZE * pixelRatio;
//   const doublePixelRatio = 2 * pixelRatio;
//   return {
//     thin: 0.75 * pixelRatio,
//     outer: doublePixelRatio,
//     pixelRatio,
//     contextSize: canvasSize,
//     block: (canvasSize - doublePixelRatio) / 3,
//     cell: (canvasSize - 2 * doublePixelRatio) / 9,
//     wrapperSize: clientWidth,
//   };
// };
interface ICurrentGame {
  id: number;
  mission: string;
  win_rate: number;
  // solution: string;
}
const CURRENT_GAME: ICurrentGame = {
  id: 379,
  mission: '3.8.15...4.97....5561..8...9.4...53..5...1.49......8...3...7..67..39.2......8.7..',
  win_rate: 67.06,
  // solution: '37841596242976318556192837498467253125783164961354982783215749674539621ALL_CELLS96284753',
};
type IValues = string;
const BOARD_NUMBERS = [
  'M27.2 39.8v-24H27c-.7.4-6 4.3-7 4.8V18c.6-.4 6.1-4.4 7.2-5h2.5v26.8h-2.5z',
  'M18 21c0-4.7 3.6-8 8.4-8 4.7 0 8.3 3.2 8.3 7.4 0 2.8-1.3 5-5.7 9.7l-7.2 7.7v.2h13.6v2.3H18v-1.8l9.4-10c3.7-4 4.7-5.7 4.7-8 0-3-2.6-5.3-5.9-5.3a5.5 5.5 0 0 0-5.8 5.7H18z',
  'M23 27.3V25h3.2c3.5 0 5.8-2.1 5.8-5.2 0-3-2.3-5-5.7-5-3.3 0-5.6 2-5.9 5H18c.3-4.4 3.7-7.2 8.5-7.2 4.6 0 8.2 3 8.2 7a6 6 0 0 1-5 6.2v.2c3.9.4 6.2 3 6.2 6.7 0 4.4-4 7.8-9.3 7.8-5.1 0-9-3.1-9.1-7.4h2.4c.3 3 3 5.1 6.7 5.1 3.9 0 6.7-2.4 6.7-5.6 0-3.3-2.6-5.4-6.9-5.4h-3.2z',
  'M30 40v-6H16.6v-2.4c2.4-4 5.7-9.2 12.3-18.4h3.6v18.5h4V34h-4v6H30zm-10.8-8.5v.2H30v-16a186 186 0 0 0-10.7 15.8z',
  'M26.9 40.6c-5 0-8.6-3-8.9-7.4h2.5c.3 3 3 5.2 6.4 5.2 3.9 0 6.7-2.8 6.7-6.7 0-4-2.8-6.8-6.7-6.8-2.6 0-5 1.3-6 3.4h-2.5l1.5-15h14.6v2.3H21.9l-1 9.7h.3a7.5 7.5 0 0 1 6.1-2.6c5.2 0 8.8 3.7 8.8 8.9 0 5.3-3.8 9-9.2 9z',
  'M27 40.9a8.8 8.8 0 0 1-8.2-5.1 16.7 16.7 0 0 1-1.8-8.3C17 18.4 20.7 13 27.1 13c4.4 0 7.8 2.7 8.6 6.8H33a6 6 0 0 0-6-4.5c-4.8 0-7.6 4.5-7.6 12.4h.2a8 8 0 0 1 7.6-5c5.1 0 8.8 3.9 8.8 9 0 5.3-3.8 9.2-9.2 9.2zm-.1-2.3c3.8 0 6.7-3 6.7-6.8 0-4-2.8-6.8-6.7-6.8a6.6 6.6 0 0 0-6.8 6.6c0 4 3 7 6.8 7z',
  'M20.7 40.6 33 16.3V16H18.2v-2.3h17.4v2.4L23.4 40.6z',
  'M27 40.9c-5.6 0-9.5-3.2-9.5-7.8 0-3.5 2.3-6.2 5.8-6.8V26a6 6 0 0 1-4.8-6c0-4 3.5-7 8.5-7s8.4 3 8.4 7a6 6 0 0 1-4.8 6v.3c3.5.6 5.9 3.3 5.9 6.8 0 4.6-3.9 7.8-9.5 7.8zm0-2.2c4 0 7-2.4 7-5.8 0-3.3-2.9-5.5-7-5.5s-7 2.2-7 5.5c0 3.4 2.9 5.8 7 5.8zm0-13.5c3.5 0 6-2 6-5s-2.5-5-6-5-6 2-6 5 2.5 5 6 5z',
  'M26.4 40.9c-4.5 0-7.8-2.7-8.5-6.9h2.6c.6 2.8 2.9 4.6 6 4.6 4.7 0 7.4-4.3 7.6-11.8l-.1-.6h-.1a8 8 0 0 1-7.7 4.9 8.6 8.6 0 0 1-8.8-8.9 9 9 0 0 1 9.2-9.2c3.6 0 6.5 1.8 8.2 5.1 1.2 2.1 1.7 4.9 1.7 8.3 0 9-3.7 14.5-10 14.5zm.2-12c3.9 0 6.8-3 6.8-6.6 0-4-2.9-7-6.7-7-3.9 0-6.7 3-6.7 6.8 0 4 2.7 6.8 6.6 6.8z',
];
// const getCoords = (pixelRatio: number): ICoord[] => {
//   const outer = getOuterSize(pixelRatio);
//   const cell = getCellSize(pixelRatio);
//   const coords: ICoord[] = [];
//   for (let x = 0; x < 9; x += 1)
//     for (let y = 0; y < 9; y += 1)
//       coords.push({
//         x: outer + cell * y,
//         y: outer + cell * x,
//         index: `${Math.floor(x / 3)}${Math.floor(y / 3)}`,
//         row: x,
//         col: y,
//       });
//   return coords;
// };

export const SudokuCanvas = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const wrapperRef = useRef<HTMLDivElement>(null);
  const context = useRef<CanvasRenderingContext2D | null>(null);
  const [currentGame] = useState<ICurrentGame>(CURRENT_GAME);
  const [selectedCell, setSelectedCell] = useState<number | null>(2);
  const values = useRef<IValues>(CURRENT_GAME.mission);
  const conflicts = useRef<boolean[]>([]);
  const mistakes = useRef<boolean[]>([]);
  const lastSolved = useRef<string>('');
  // const [finished, setFinished] = useState<boolean>(false);

  const { devicePixelRatio } = window;
  const adjustedPixelRatio = devicePixelRatio && devicePixelRatio > 2 ? 2 * devicePixelRatio : 4;
  const clearCanvas = () => {
    if (!context.current || !wrapperRef.current) throw new Error('');
    const contextSize = getContextSize(adjustedPixelRatio);
    context.current.clearRect(0, 0, contextSize, contextSize);
    context.current.fillStyle = COLOR_BACKGROUND;
    context.current.fillRect(0, 0, contextSize, contextSize);
  };
  const drawGrid = () => {
    if (!context.current || !wrapperRef.current) throw new Error('');
    const contextCurrent = context.current;
    const thinSize = getThinSize(adjustedPixelRatio);
    const outerSize = getOuterSize(adjustedPixelRatio);
    const cellSize = getCellSize(adjustedPixelRatio);
    const blockSize = getBlockSize(adjustedPixelRatio);
    contextCurrent.strokeStyle = COLOR_THIN_BORDER;
    contextCurrent.lineWidth = thinSize;
    for (let cellIndex = 0; cellIndex < ALL_SUDOKU_CELLS; cellIndex += 1) {
      contextCurrent.strokeRect(
        getCellXPosition(outerSize, cellSize, cellIndex),
        getCellYPosition(outerSize, cellSize, cellIndex),
        cellSize,
        cellSize,
      );
    }
    contextCurrent.strokeStyle = COLOR_DARK;
    contextCurrent.lineWidth = outerSize;
    for (let x = 0; x < 3; x += 1)
      for (let y = 0; y < 3; y += 1)
        contextCurrent.strokeRect(
          outerSize / 2 + blockSize * x,
          outerSize / 2 + blockSize * y,
          blockSize,
          blockSize,
        );
  };
  const handleClickCanvas: React.MouseEventHandler<HTMLDivElement> = ({ clientX, clientY }) => {
    if (!wrapperRef.current) throw new Error('');
    const { left, top } = wrapperRef.current.getBoundingClientRect();
    const sudokuRectangleSize = (wrapperRef.current.clientWidth * adjustedPixelRatio) / 9;
    const x = adjustedPixelRatio * (clientX - left);
    const y = adjustedPixelRatio * (clientY - top);
    const index =
      Math.floor(Math.abs(x) / sudokuRectangleSize) +
      9 * Math.floor(Math.abs(y) / sudokuRectangleSize);
    setSelectedCell(index);
  };
  // const drawOuterBorders = () => {
  //   if (!context.current || !wrapperRef.current) throw new Error('');
  //   const sizes = getsizes(pixelRatio, wrapperRef.current.clientWidth);
  //   const { outer, block } = sizes;
  //   context.current.strokeStyle = COLOR_DARK_SMART;
  //   context.current.lineWidth = outer;
  //   for (let i = 0; i < 3; i += 1)
  //     for (let r = 0; r < 3; r += 1)
  //       context.current.strokeRect(
  //         outer / 2 + block * i + 5 * pixelRatio,
  //         outer / 2 + block * r + 5 * pixelRatio,
  //         block,
  //         block,
  //       );
  // };
  const drawSelectedCell = () => {
    if (!context.current) throw new Error('');
    const contextCurrent = context.current;
    const cellSize = getCellSize(adjustedPixelRatio);
    const outerSize = getOuterSize(adjustedPixelRatio);
    contextCurrent.save();
    for (let cellIndex = 0; cellIndex < ALL_SUDOKU_CELLS; cellIndex += 1) {
      if (
        selectedCell != null &&
        cellIndex !== selectedCell &&
        !(
          getCubeId(selectedCell) !== getCubeId(cellIndex) &&
          // isTheSameLargerCube(selectedCell, cellIndex) &&
          getX(selectedCell) !== getX(cellIndex) &&
          getY(selectedCell) !== getY(cellIndex)
        )
      ) {
        contextCurrent.fillStyle = COLOR_NEIGHBOR;
        contextCurrent.fillRect(
          getCellXPosition(outerSize, cellSize, cellIndex),
          getCellYPosition(outerSize, cellSize, cellIndex),
          cellSize,
          cellSize,
        );
      }
      if (
        selectedCell != null &&
        isSudokuCellEmpty(values.current[selectedCell]) &&
        values.current[selectedCell] === values.current[cellIndex]
      ) {
        contextCurrent.fillStyle = COLOR_SAME_VAL;
        contextCurrent.fillRect(
          getCellXPosition(outerSize, cellSize, cellIndex),
          getCellYPosition(outerSize, cellSize, cellIndex),
          cellSize,
          cellSize,
        );
      }
      if (conflicts.current[cellIndex]) {
        contextCurrent.fillStyle = COLOR_CONFLICT;
        contextCurrent.fillRect(
          getCellXPosition(outerSize, cellSize, cellIndex),
          getCellYPosition(outerSize, cellSize, cellIndex),
          cellSize,
          cellSize,
        );
      }
    }
    if (selectedCell) {
      contextCurrent.fillStyle = COLOR_SELECTED;
      contextCurrent.fillRect(
        getCellXPosition(outerSize, cellSize, selectedCell),
        getCellYPosition(outerSize, cellSize, selectedCell),
        cellSize,
        cellSize,
      );
      contextCurrent.restore();
    }
  };
  const drawBoardNumbers = () => {
    if (!context.current || !wrapperRef.current) throw new Error('');
    const contextCurrent = context.current;
    const cellSize = getCellSize(adjustedPixelRatio);
    const outerSize = getOuterSize(adjustedPixelRatio);
    const mode = 'classic';
    const scaledValue = (2 * cellSize) / MAGIC_NUMBER_TO_SCALE_NUMBERS_PROPERLY;
    for (let cellIndex = 0; cellIndex < ALL_SUDOKU_CELLS; cellIndex += 1) {
      if (!isSudokuCellEmpty(values.current[cellIndex])) {
        contextCurrent.save();
        contextCurrent.scale(1, 1);
        contextCurrent.fillStyle =
          (isSudokuCellEmpty(currentGame.mission[cellIndex]) && mode) ||
          (!isSudokuCellEmpty(currentGame.mission[cellIndex]) && !mode)
            ? COLOR_BLUE
            : COLOR_DARK;
        isSudokuCellEmpty(currentGame.mission[cellIndex]) &&
          mistakes.current[cellIndex] &&
          (contextCurrent.fillStyle = COLOR_RED);
        const a = new Path2D(BOARD_NUMBERS[parseInt(values.current[cellIndex], 10) - 1]);
        contextCurrent.scale(scaledValue, scaledValue);
        contextCurrent.translate(
          getCellXPosition(outerSize, cellSize, cellIndex) / scaledValue,
          getCellYPosition(outerSize, cellSize, cellIndex) / scaledValue,
        );
        contextCurrent.fill(a);
        contextCurrent.restore();
      }
    }
  };
  const paintBoard = () => {
    if (currentGame) {
      clearCanvas();
      drawSelectedCell();
      drawGrid();
      drawBoardNumbers();
    }
  };

  const validateBoard = () => {
    if (!selectedCell) return;
    const updatedConflicts: boolean[] = Array(ALL_SUDOKU_CELLS).fill(false);
    const updatedMistakes: boolean[] = Array(ALL_SUDOKU_CELLS).fill(false);
    let solution = solve(values.current);
    if (solution === '') {
      solution = '';
    } else {
      for (let cellIndex = 0; cellIndex < ALL_SUDOKU_CELLS; cellIndex += 1) {
        if (values.current[cellIndex] !== solution[cellIndex]) {
          updatedMistakes[cellIndex] = true;
        }
        for (let cellIndex2 = 0; cellIndex2 < ALL_SUDOKU_CELLS; cellIndex2 += 1) {
          if (
            !isSudokuCellEmpty(values.current[cellIndex2]) &&
            cellIndex !== cellIndex2 &&
            values.current[cellIndex] === values.current[cellIndex2] &&
            !(
              getCubeId(cellIndex2) !== getCubeId(cellIndex) &&
              getX(cellIndex2) !== getX(cellIndex) &&
              getY(cellIndex2) !== getY(cellIndex)
            )
          ) {
            updatedConflicts[cellIndex] = true;
          }
        }
      }
    }
    conflicts.current = updatedConflicts;
    mistakes.current = updatedMistakes;
    paintBoard();
    lastSolved.current = solution;
  };
  const handleKeyDown = (event: KeyboardEvent) => {
    if (
      event.key >= '0' &&
      event.key <= '9' &&
      selectedCell &&
      isSudokuCellEmpty(currentGame.mission[selectedCell])
    ) {
      const updatedValues = [...values.current];
      updatedValues[selectedCell] = event.key;
      const solution = solve(values.current);
      if (solution !== '') {
        values.current = updatedValues.join('');
        validateBoard();
        paintBoard();
      }
    }
  };
  useEventListener('keypress', handleKeyDown);
  const generateCanvas = () => {
    if (!canvasRef.current || !wrapperRef.current) throw new Error('');
    const { clientWidth } = wrapperRef.current;
    canvasRef.current.width = CANVAS_SIZE * adjustedPixelRatio;
    canvasRef.current.height = CANVAS_SIZE * adjustedPixelRatio;
    canvasRef.current.style.width = `${clientWidth}px`;
    canvasRef.current.style.height = `${clientWidth}px`;
    context.current = canvasRef.current.getContext('2d', { alpha: false });
    clearCanvas();
    drawGrid();
  };

  useEffect(() => {
    generateCanvas();
    paintBoard();
  });
  useEffect(() => {
    initWasm();
  }, []);

  return (
    <div ref={wrapperRef} onClick={handleClickCanvas} style={{ width: 500, height: 500 }}>
      <canvas ref={canvasRef} />
    </div>
  );
};
