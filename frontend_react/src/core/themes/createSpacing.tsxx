/* eslint-disable prettier/prettier */
export function getPath(obj: any, path: string) {
  if (!path || typeof path !== 'string') {
    return null;
  }
  const pathArr = path.split('.');
  return pathArr.reduce((acc, item) => (acc && acc[item] ? acc[item] : null), obj);
}

export function createUnaryUnit(
  theme: { spacing: SpacingOptions },
  themeKey: keyof Theme,
  defaultValue: any,
  propName: keyof Theme,
) {
  const themeSpacing = getPath(theme, themeKey) || defaultValue;

  if (typeof themeSpacing === 'number') {
    return (abs: string) => {
      if (typeof abs === 'string') {
        return abs;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (typeof abs !== 'number') {
          console.error(`Expected ${propName} argument to be a number or a string, got ${abs}.`);
        }
      }
      return themeSpacing * abs;
    };
  }

  if (Array.isArray(themeSpacing)) {
    return (abs: string) => {
      if (typeof abs === 'string') {
        return abs;
      }
      if (process.env.NODE_ENV !== 'production') {
        if (!Number.isInteger(abs)) {
          console.error(
            [
              `The \`theme.${themeKey}\` array type cannot be combined with non integer values.` +
              `You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`,
            ].join('\n'),
          );
        } else if (abs > themeSpacing.length - 1) {
          console.error(
            [
              `The value provided (${abs}) overflows.`,
              `The supported values are: ${JSON.stringify(themeSpacing)}.`,
              `${abs} > ${themeSpacing.length - 1}, you need to add the missing values.`,
            ].join('\n'),
          );
        }
      }
      return themeSpacing[abs];
    };
  }

  if (typeof themeSpacing === 'function') {
    return themeSpacing;
  }

  if (process.env.NODE_ENV !== 'production') {
    console.error(
      [
        `The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`,
        'It should be a number, an array or a function.',
      ].join('\n'),
    );
  }

  return () => undefined;
}

export function createUnarySpacing(theme: { spacing: SpacingOptions }) {
  return createUnaryUnit(theme, 'spacing', 8, 'spacing');
}

type SpacingOptions =
  | number
  | ThemeSpacing
  | ((abs: number) => number | string)
  | ((abs: number | string) => number | string)
  | ReadonlyArray<string | number>;

type SpacingArgument = number | string;

// The different signatures imply different meaning for their arguments that can't be expressed structurally.
// We express the difference with variable names.
/* tslint:disable:unified-signatures */
interface ThemeSpacing {
  (): string;
  (value: number): string;
  (topBottom: SpacingArgument, rightLeft: SpacingArgument): string;
  (top: SpacingArgument, rightLeft: SpacingArgument, bottom: SpacingArgument): string;
  (
    top: SpacingArgument,
    right: SpacingArgument,
    bottom: SpacingArgument,
    left: SpacingArgument,
  ): string;
}
/* tslint:enable:unified-signatures */

export default function createSpacing(spacingInput: SpacingOptions = 8): ThemeSpacing {
  // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
  // Smaller components, such as icons, can align to a 4dp grid.
  // https://material.io/design/layout/understanding-layout.html#usage
  const transformSpacing = createUnarySpacing({
    spacing: spacingInput,
  });
  const spacing = (...argsInput: ReadonlyArray<number | string>): string => {
    if (process.env.NODE_ENV !== 'production') {
      if (!(argsInput.length <= 4)) {
        // eslint-disable-next-line no-console
        console.error(
          `Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`,
        );
      }
    }
    const args = argsInput.length === 0 ? [1] : argsInput;
    return args
      .map((argument) => {
        const output = transformSpacing(argument);
        return typeof output === 'number' ? `${output}px` : output;
      })
      .join(' ');
  };
  return spacing;
}
